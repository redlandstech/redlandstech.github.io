{"version":3,"sources":["webpack:///./src/pages/tags.tsx","webpack:///./src/components/bio.tsx"],"names":["Tags","render","data","this","props","siteTitle","site","siteMetadata","title","group","allMarkdownRemark","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_head__WEBPACK_IMPORTED_MODULE_5__","keywords","_components_bio__WEBPACK_IMPORTED_MODULE_3__","className","map","tag","key","fieldValue","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","totalCount","React","Component","pageQuery","__webpack_exports__","query","_data$site$siteMetada","description","social","href","twitter","_public_static_d_3599211134_json__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"uPAWqBA,4FACnBC,OAAA,WAAS,IACAC,EAAQC,KAAKC,MAAbF,KACDG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBD,MAErC,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQN,MAAOH,GACbM,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMP,MAAM,WAAWQ,SAAU,yCACjCL,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UAAKR,GACLM,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,QAGJN,EAAAC,EAAAC,cAAA,OAAKK,UAAS,gBACXT,EAAMU,IACL,SAAAC,GAAG,OACDA,GACET,EAAAC,EAAAC,cAAA,OAAKQ,IAAKD,EAAIE,YACZX,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAE,SAAWJ,EAAIE,WAAf,KAA+BF,EAAIE,aAE7CX,EAAAC,EAAAC,cAAA,aACGO,EAAIK,WADP,QAC2C,IAAnBL,EAAIK,WAAmB,GAAK,eA1BtCC,IAAMC,WAoD3BC,EAAS,qFCjDPC,EAAA,aACb,OACElB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEO,MAAK,aAYL7B,OAAQ,SAACC,GAA0B,IAAA6B,EACH7B,EAAKI,KAAKC,aAAjCyB,EAD0BD,EAC1BC,YAAaC,EADaF,EACbE,OACpB,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACGmB,EACDrB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGqB,KAAMD,EAAOE,SAAhB,cApBVjC,KAAAkC","file":"component---src-pages-tags-tsx-3cfe0678dda26106cc9f.js","sourcesContent":["import React from 'react'\nimport {Link, graphql} from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport Head from '../components/head'\n\ninterface Props {\n  readonly data: PageQueryData\n}\n\nexport default class Tags extends React.Component<Props> {\n  render() {\n    const {data} = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const group = data.allMarkdownRemark.group\n\n    return (\n      <Layout title={siteTitle}>\n        <Head title=\"All tags\" keywords={[`blog`, `gatsby`, `javascript`, `react`]} />\n        <article>\n          <header>\n            <h1>{siteTitle}</h1>\n            <h2>All tags</h2>\n            <small>\n              <Bio />\n            </small>\n          </header>\n          <div className={`page-content`}>\n            {group.map(\n              tag =>\n                tag && (\n                  <div key={tag.fieldValue}>\n                    <h3>\n                      <Link to={`/tags/${tag.fieldValue}/`}>{tag.fieldValue}</Link>\n                    </h3>\n                    <small>\n                      {tag.totalCount} post{tag.totalCount === 1 ? '' : 's'}\n                    </small>\n                  </div>\n                ),\n            )}\n          </div>\n        </article>\n      </Layout>\n    )\n  }\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    group: {\n      fieldValue: string\n      totalCount: number\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: {frontmatter: {published: {ne: false}}}) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","import React from 'react'\nimport {StaticQuery, graphql} from 'gatsby'\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      description: string\n      social: {\n        twitter: string\n      }\n    }\n  }\n}\n\nexport default function() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              description\n              social {\n                twitter\n              }\n            }\n          }\n        }\n      `}\n      render={(data: StaticQueryData) => {\n        const {description, social} = data.site.siteMetadata\n        return (\n          <div>\n            <p>\n              {description}\n              <br />\n              <a href={social.twitter}>Twitter</a>\n            </p>\n          </div>\n        )\n      }}\n    />\n  )\n}\n"],"sourceRoot":""}