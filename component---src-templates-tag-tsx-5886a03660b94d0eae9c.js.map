{"version":3,"sources":["webpack:///./src/templates/tag.tsx","webpack:///./src/components/bio.tsx"],"names":["TagTemplate","render","_this$props","this","props","pageContext","data","tag","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_head__WEBPACK_IMPORTED_MODULE_4__","keywords","_components_bio__WEBPACK_IMPORTED_MODULE_5__","className","map","_ref","node","frontmatter","fields","slug","key","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","date","dangerouslySetInnerHTML","__html","excerpt","React","Component","pageQuery","__webpack_exports__","query","_data$site$siteMetada","description","social","href","twitter","_public_static_d_3599211134_json__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"uPAcqBA,4FACnBC,OAAA,WAAS,IAAAC,EACqBC,KAAKC,MAA1BC,EADAH,EACAG,YAAaC,EADbJ,EACaI,KACbC,EAAOF,EAAPE,IACDC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAErC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQP,MAAOH,GACbO,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACER,MAAK,iBAAmBJ,EAAnB,IACLa,SAAU,sCAA0Cb,KAEtDQ,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,0BAAkBV,GAClBQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,QAGJN,EAAAC,EAAAC,cAAA,OAAKK,UAAS,gBACXV,EAAMW,IAAI,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACLd,EAAQc,EAAKC,YAAYf,OAASc,EAAKE,OAAOC,KACpD,OACEb,EAAAC,EAAAC,cAAA,OAAKY,IAAKJ,EAAKE,OAAOC,MACpBb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAIN,EAAKE,OAAOC,MAAOjB,IAE/BI,EAAAC,EAAAC,cAAA,aAAQQ,EAAKC,YAAYM,MACzBjB,EAAAC,EAAAC,cAAA,KAAGgB,wBAAyB,CAACC,OAAQT,EAAKU,qBA9BnBC,IAAMC,WAgElCC,EAAS,qFChEPC,EAAA,aACb,OACExB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACEU,MAAK,aAYLvC,OAAQ,SAACK,GAA0B,IAAAmC,EACHnC,EAAKG,KAAKC,aAAjCgC,EAD0BD,EAC1BC,YAAaC,EADaF,EACbE,OACpB,OACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACGyB,EACD3B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAG2B,KAAMD,EAAOE,SAAhB,cApBVvC,KAAAwC","file":"component---src-templates-tag-tsx-5886a03660b94d0eae9c.js","sourcesContent":["import React from 'react'\nimport {Link, graphql} from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport Bio from '../components/bio'\n\ninterface Props {\n  readonly data: PageQueryData\n  readonly pageContext: {\n    tag: string\n  }\n}\n\nexport default class TagTemplate extends React.Component<Props> {\n  render() {\n    const {pageContext, data} = this.props\n    const {tag} = pageContext\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout title={siteTitle}>\n        <Head\n          title={`Posts tagged \"${tag}\"`}\n          keywords={[`blog`, `gatsby`, `javascript`, `react`, tag]}\n        />\n        <article>\n          <header>\n            <h1>Posts tagged {tag}</h1>\n            <h2 />\n            <small>\n              <Bio />\n            </small>\n          </header>\n          <div className={`page-content`}>\n            {posts.map(({node}) => {\n              const title = node.frontmatter.title || node.fields.slug\n              return (\n                <div key={node.fields.slug}>\n                  <h3>\n                    <Link to={node.fields.slug}>{title}</Link>\n                  </h3>\n                  <small>{node.frontmatter.date}</small>\n                  <p dangerouslySetInnerHTML={{__html: node.excerpt}} />\n                </div>\n              )\n            })}\n          </div>\n        </article>\n      </Layout>\n    )\n  }\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    totalCount: number\n    edges: {\n      node: {\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 1000, filter: {frontmatter: {tags: {in: [$tag]}}}) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport {StaticQuery, graphql} from 'gatsby'\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      description: string\n      social: {\n        twitter: string\n      }\n    }\n  }\n}\n\nexport default function() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              description\n              social {\n                twitter\n              }\n            }\n          }\n        }\n      `}\n      render={(data: StaticQueryData) => {\n        const {description, social} = data.site.siteMetadata\n        return (\n          <div>\n            <p>\n              {description}\n              <br />\n              <a href={social.twitter}>Twitter</a>\n            </p>\n          </div>\n        )\n      }}\n    />\n  )\n}\n"],"sourceRoot":""}